Chatbot

from nltk.chat.util import Chat, reflections
import streamlit as st

# Menu with case-insensitive keys
MENU = {
    "paneer": 220,
    "biryani": 180,
    "chicken": 250,
    "naan": 30,
    "lassi": 50,
    "gulab jamun": 60
}

# Patterns for NLTK
patterns = [
    (r'hi|hello|hey|good morning|good afternoon|how are you', ["Hello! Welcome to Spice Garden. Type 'menu' to see what we offer."]),
    (r'(.*)menu(.*)', ["Here's our menu:\n" + "\n".join([f"- {k.title()}: ₹{v}" for k, v in MENU.items()])]),
   (r'(.*)remove (.*)', ["I'll remove that from your order..."]),
    (r'(.*)(want|order|add)(.*)', ["Let me add that to your order..."]),
    (r'(.*)cancel(.*)', ["Your order has been cancelled."]),
     (r'(.*)show (.*) order(.*)', ["Here's your current order:"]),
    (r'bye|exit', ["Thanks for visiting! Have a delicious day!"]),
    (r'(.*)', ["Sorry couldn't process the request. For information visit www.cafe.com"]),
]

# Chatbot
chatbot = Chat(patterns, reflections)

# Streamlit page
st.set_page_config(page_title="Restaurant NLTK Bot", layout="centered")
st.title("🍽️ Spice Garden Chatbot")

# Session state
if "chat" not in st.session_state:
    st.session_state.chat = []
if "order" not in st.session_state:
    st.session_state.order = {}

# Display previous chat
for speaker, message in st.session_state.chat:
    with st.chat_message("assistant" if speaker == "Bot" else "user"):
        st.markdown(message)

# Input
user_input = st.chat_input("Say something...")

def show_order():
    if st.session_state.order:
        msg = "**Your Order:**\n"
        total = 0
        for item, qty in st.session_state.order.items():
            price = MENU.get(item.lower(), 0) * qty
            msg += f"- {item.title()} x {qty} = ₹{price}\n"
            total += price
        return msg + f"\n**Total: ₹{total}**"
    else:
        return "Your order is empty."

def find_menu_item(user_input):
    """Finds the closest matching menu item in user input"""
    user_input = user_input.lower()
    # First try exact matches
    for item in MENU:
        if item in user_input:
            return item
    # Then try partial matches (like "lasso" for "lassi")
    for item in MENU:
        if item.startswith(user_input[:3]):  # Check first 3 letters
            return item
    return None

# Chat logic
if user_input:
    st.session_state.chat.append(("User", user_input))
    lower = user_input.lower()
    response = chatbot.respond(user_input) or ""

    if ("add" in lower or ("order" in lower and "show" not in lower and "my" not in lower and "cancel" not in lower) or "want" in lower):
        found_items = []
        for item in MENU:
            if item in lower and item not in found_items:
                st.session_state.order[item] = st.session_state.order.get(item, 0) + 1
                found_items.append(item.title())

        if found_items:
            response += f"\n✅ Added: {', '.join(found_items)}"
        else:
            response += "\n❌ Couldn't find any items to add to your order."

    elif "remove" in lower:
        removed_items = []
        for word in lower.split():
            item = find_menu_item(word)
            if item and item in st.session_state.order:
                if st.session_state.order[item] > 1:
                    st.session_state.order[item] -= 1
                else:
                    del st.session_state.order[item]
                removed_items.append(item.title())
        
        if removed_items:
            response += f"\n🗑️ Removed: {', '.join(removed_items)}"
        else:
            response += "\n❌ Couldn't find any items to remove from your order."

    elif "show order" in lower or "my order" in lower:
        response += "\n" + show_order()

    elif "cancel" in lower:
        for item in list(st.session_state.order.keys()):
            if st.session_state.order[item] > 1:
                st.session_state.order[item] -= 1
            else:
                del st.session_state.order[item]
        response += "\n🧹 Your order has been cleared."
        

    st.session_state.chat.append(("Bot", response))
    st.rerun()